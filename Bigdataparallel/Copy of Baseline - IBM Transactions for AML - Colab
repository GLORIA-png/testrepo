{"metadata":{"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":5080714,"sourceType":"datasetVersion","datasetId":2948142}],"dockerImageVersionId":30698,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false},"colab":{"provenance":[{"file_id":"https://storage.googleapis.com/kaggle-colab-exported-notebooks/gloriasoumya/baseline-ibm-transactions-for-aml.30418993-591d-4317-ae16-8612ec9083dd.ipynb?X-Goog-Algorithm=GOOG4-RSA-SHA256&X-Goog-Credential=gcp-kaggle-com%40kaggle-161607.iam.gserviceaccount.com/20250522/auto/storage/goog4_request&X-Goog-Date=20250522T124311Z&X-Goog-Expires=259200&X-Goog-SignedHeaders=host&X-Goog-Signature=72819af36bc76f4752463ef1139f89e5643b89c19b5dee9086440bc4331233e039b77cbd08c1602f869caa4ed0c52b60eadf3c5f1bb5b7d1bc621649fd7dce4ae592cb7eb4d88dea65e605467893930a87576901d8b11895b27c7dd9ef513766de8fbd14abff666b14aaf0520cca8cbab1c1f779a5f4c99cc74ecebbabaa21f6e0716fe357c9bee4945679423ad3f0d52151f3eadfb1022d05d54564ab079be4a0a32290deb1c67b8078cb35f0f688736f5bcf4aa875ea18b2eb542363db06886dd587c434073edcdc6eb19a27a5b6bdb04e46893f2cba89cdec04905a6565969b717e3714b385dfd664b48d08b75d26ba80e6d5f9a6fd308af5c285bffc1407","timestamp":1747918219843}]}},"nbformat_minor":0,"nbformat":4,"cells":[{"source":["\n"],"metadata":{"id":"vJNvSz5SBOey","executionInfo":{"status":"ok","timestamp":1748978400440,"user_tz":-120,"elapsed":47,"user":{"displayName":"Gloria Francis","userId":"09631155675230775671"}}},"cell_type":"code","outputs":[],"execution_count":null},{"cell_type":"markdown","source":["## Import Libraries"],"metadata":{"id":"k2az3lxSBOe1"}},{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","%matplotlib inline\n","\n","import warnings\n","warnings.filterwarnings(\"ignore\")\n","\n","from sklearn.pipeline import Pipeline\n","from sklearn.impute import SimpleImputer\n","from sklearn.preprocessing import RobustScaler, OrdinalEncoder\n","from sklearn.compose import ColumnTransformer\n","from sklearn.model_selection import GridSearchCV\n","\n","from sklearn.model_selection import train_test_split\n","\n","from sklearn.metrics import accuracy_score, f1_score, precision_score, recall_score, confusion_matrix, roc_auc_score, roc_curve\n","from xgboost import XGBClassifier\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.ensemble import ExtraTreesClassifier\n","\n","from sklearn.metrics import classification_report, confusion_matrix\n","from imblearn.over_sampling import SMOTE\n","from collections import Counter\n","\n","\n"],"metadata":{"execution":{"iopub.status.busy":"2024-05-17T14:50:00.960952Z","iopub.execute_input":"2024-05-17T14:50:00.961488Z","iopub.status.idle":"2024-05-17T14:50:05.075327Z","shell.execute_reply.started":"2024-05-17T14:50:00.961442Z","shell.execute_reply":"2024-05-17T14:50:05.073757Z"},"trusted":true,"id":"Or6t0_njBOe3","executionInfo":{"status":"ok","timestamp":1748978102518,"user_tz":-120,"elapsed":6117,"user":{"displayName":"Gloria Francis","userId":"09631155675230775671"}}},"execution_count":2,"outputs":[]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"id":"XD2pxia5mVMU","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1748978139081,"user_tz":-120,"elapsed":33019,"user":{"displayName":"Gloria Francis","userId":"09631155675230775671"}},"outputId":"7d56b0b6-bd9b-4651-9987-f1c16a7480af"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","source":["data_path = \"/content/drive/My Drive/project/HI-Small_Trans.csv/HI-Small_Trans.csv\""],"metadata":{"execution":{"iopub.status.busy":"2024-05-17T14:50:05.077178Z","iopub.execute_input":"2024-05-17T14:50:05.079503Z","iopub.status.idle":"2024-05-17T14:50:05.086187Z","shell.execute_reply.started":"2024-05-17T14:50:05.079462Z","shell.execute_reply":"2024-05-17T14:50:05.08365Z"},"trusted":true,"id":"61fA8s6YBOe5","executionInfo":{"status":"ok","timestamp":1748978142354,"user_tz":-120,"elapsed":84,"user":{"displayName":"Gloria Francis","userId":"09631155675230775671"}}},"execution_count":4,"outputs":[]},{"cell_type":"markdown","source":["## Load the raw data"],"metadata":{"id":"NXpyI4pvBOe5"}},{"cell_type":"code","source":["raw_df = pd.read_csv(data_path)\n","\n","raw_df.shape"],"metadata":{"execution":{"iopub.status.busy":"2024-05-17T14:50:05.087615Z","iopub.execute_input":"2024-05-17T14:50:05.087947Z","iopub.status.idle":"2024-05-17T14:50:22.645898Z","shell.execute_reply.started":"2024-05-17T14:50:05.087921Z","shell.execute_reply":"2024-05-17T14:50:22.644712Z"},"trusted":true,"id":"ss63STFkBOe6"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df = raw_df.sample(n=50000, random_state=1)\n","\n","df.shape"],"metadata":{"execution":{"iopub.status.busy":"2024-05-17T14:50:22.648432Z","iopub.execute_input":"2024-05-17T14:50:22.648778Z","iopub.status.idle":"2024-05-17T14:50:22.97151Z","shell.execute_reply.started":"2024-05-17T14:50:22.648749Z","shell.execute_reply":"2024-05-17T14:50:22.970265Z"},"trusted":true,"id":"kdNiV7oGBOe7","executionInfo":{"status":"ok","timestamp":1747917871567,"user_tz":-120,"elapsed":409,"user":{"displayName":"","userId":""}},"outputId":"d39dbc70-fb37-419b-ac3a-338088ac54af","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(50000, 11)"]},"metadata":{},"execution_count":5}]},{"cell_type":"code","source":["df.columns"],"metadata":{"execution":{"iopub.status.busy":"2024-05-17T14:50:22.973195Z","iopub.execute_input":"2024-05-17T14:50:22.973615Z","iopub.status.idle":"2024-05-17T14:50:22.983205Z","shell.execute_reply.started":"2024-05-17T14:50:22.973586Z","shell.execute_reply":"2024-05-17T14:50:22.98176Z"},"trusted":true,"id":"PJnCi0yPBOe8","executionInfo":{"status":"ok","timestamp":1747917873391,"user_tz":-120,"elapsed":28,"user":{"displayName":"","userId":""}},"outputId":"c1077e1e-c2bf-4097-b7f5-342124363855","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['Timestamp', 'From Bank', 'Account', 'To Bank', 'Account.1',\n","       'Amount Received', 'Receiving Currency', 'Amount Paid',\n","       'Payment Currency', 'Payment Format', 'Is Laundering'],\n","      dtype='object')"]},"metadata":{},"execution_count":6}]},{"cell_type":"code","source":["df.head(3)"],"metadata":{"execution":{"iopub.status.busy":"2024-05-17T14:50:22.984879Z","iopub.execute_input":"2024-05-17T14:50:22.985456Z","iopub.status.idle":"2024-05-17T14:50:23.018899Z","shell.execute_reply.started":"2024-05-17T14:50:22.985418Z","shell.execute_reply":"2024-05-17T14:50:23.017606Z"},"trusted":true,"id":"KIg9c6vWBOe8","executionInfo":{"status":"ok","timestamp":1747917875790,"user_tz":-120,"elapsed":99,"user":{"displayName":"","userId":""}},"outputId":"4c0ba79b-fb37-4e82-8a84-26f1a5b90c03","colab":{"base_uri":"https://localhost:8080/","height":143}},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                Timestamp  From Bank    Account  To Bank  Account.1  \\\n","4205263  2022/09/08 23:03         70  100428A08   148586  8120D5550   \n","3270156  2022/09/07 00:15       1132  80C50E4A0       28  80B7644F0   \n","2669041  2022/09/05 18:41         70  1004288E8    32814  80C1FC0D0   \n","\n","         Amount Received Receiving Currency  Amount Paid Payment Currency  \\\n","4205263         13204.53        Saudi Riyal     13204.53      Saudi Riyal   \n","3270156           329.94       Mexican Peso       329.94     Mexican Peso   \n","2669041         54497.52       Mexican Peso     54497.52     Mexican Peso   \n","\n","        Payment Format  Is Laundering  \n","4205263           Cash              0  \n","3270156    Credit Card              0  \n","2669041    Credit Card              0  "],"text/html":["\n","  <div id=\"df-6647b5fc-7f8b-4f3d-9691-7a0951ab31ad\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Timestamp</th>\n","      <th>From Bank</th>\n","      <th>Account</th>\n","      <th>To Bank</th>\n","      <th>Account.1</th>\n","      <th>Amount Received</th>\n","      <th>Receiving Currency</th>\n","      <th>Amount Paid</th>\n","      <th>Payment Currency</th>\n","      <th>Payment Format</th>\n","      <th>Is Laundering</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>4205263</th>\n","      <td>2022/09/08 23:03</td>\n","      <td>70</td>\n","      <td>100428A08</td>\n","      <td>148586</td>\n","      <td>8120D5550</td>\n","      <td>13204.53</td>\n","      <td>Saudi Riyal</td>\n","      <td>13204.53</td>\n","      <td>Saudi Riyal</td>\n","      <td>Cash</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3270156</th>\n","      <td>2022/09/07 00:15</td>\n","      <td>1132</td>\n","      <td>80C50E4A0</td>\n","      <td>28</td>\n","      <td>80B7644F0</td>\n","      <td>329.94</td>\n","      <td>Mexican Peso</td>\n","      <td>329.94</td>\n","      <td>Mexican Peso</td>\n","      <td>Credit Card</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2669041</th>\n","      <td>2022/09/05 18:41</td>\n","      <td>70</td>\n","      <td>1004288E8</td>\n","      <td>32814</td>\n","      <td>80C1FC0D0</td>\n","      <td>54497.52</td>\n","      <td>Mexican Peso</td>\n","      <td>54497.52</td>\n","      <td>Mexican Peso</td>\n","      <td>Credit Card</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6647b5fc-7f8b-4f3d-9691-7a0951ab31ad')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-6647b5fc-7f8b-4f3d-9691-7a0951ab31ad button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-6647b5fc-7f8b-4f3d-9691-7a0951ab31ad');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-414149c4-094f-4f8a-9796-6397244efaa9\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-414149c4-094f-4f8a-9796-6397244efaa9')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-414149c4-094f-4f8a-9796-6397244efaa9 button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df","repr_error":"0"}},"metadata":{},"execution_count":7}]},{"cell_type":"code","source":["df.info()"],"metadata":{"execution":{"iopub.status.busy":"2024-05-17T14:50:23.020616Z","iopub.execute_input":"2024-05-17T14:50:23.021032Z","iopub.status.idle":"2024-05-17T14:50:23.089066Z","shell.execute_reply.started":"2024-05-17T14:50:23.021Z","shell.execute_reply":"2024-05-17T14:50:23.087723Z"},"trusted":true,"id":"jst3z6_JBOe9","executionInfo":{"status":"ok","timestamp":1747917883811,"user_tz":-120,"elapsed":1309,"user":{"displayName":"","userId":""}},"outputId":"a8d8f114-09dd-4155-d2d8-d02d06072c8b","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","Index: 50000 entries, 4205263 to 1446591\n","Data columns (total 11 columns):\n"," #   Column              Non-Null Count  Dtype  \n","---  ------              --------------  -----  \n"," 0   Timestamp           50000 non-null  object \n"," 1   From Bank           50000 non-null  int64  \n"," 2   Account             50000 non-null  object \n"," 3   To Bank             50000 non-null  int64  \n"," 4   Account.1           50000 non-null  object \n"," 5   Amount Received     50000 non-null  float64\n"," 6   Receiving Currency  50000 non-null  object \n"," 7   Amount Paid         50000 non-null  float64\n"," 8   Payment Currency    50000 non-null  object \n"," 9   Payment Format      50000 non-null  object \n"," 10  Is Laundering       50000 non-null  int64  \n","dtypes: float64(2), int64(3), object(6)\n","memory usage: 5.6+ MB\n"]}]},{"cell_type":"code","source":["df['From Bank'].value_counts()"],"metadata":{"execution":{"iopub.status.busy":"2024-05-17T14:50:23.090403Z","iopub.execute_input":"2024-05-17T14:50:23.090745Z","iopub.status.idle":"2024-05-17T14:50:23.103978Z","shell.execute_reply.started":"2024-05-17T14:50:23.090717Z","shell.execute_reply":"2024-05-17T14:50:23.102713Z"},"trusted":true,"id":"6p6gnwDZBOe9","executionInfo":{"status":"ok","timestamp":1747917893141,"user_tz":-120,"elapsed":27,"user":{"displayName":"","userId":""}},"outputId":"97c76d95-f06f-4804-82c6-4f2c3e7ff673","colab":{"base_uri":"https://localhost:8080/","height":490}},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["From Bank\n","70        4352\n","12         794\n","10         789\n","1          585\n","15         548\n","          ... \n","36771        1\n","310095       1\n","354146       1\n","320489       1\n","328641       1\n","Name: count, Length: 3429, dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>count</th>\n","    </tr>\n","    <tr>\n","      <th>From Bank</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>70</th>\n","      <td>4352</td>\n","    </tr>\n","    <tr>\n","      <th>12</th>\n","      <td>794</td>\n","    </tr>\n","    <tr>\n","      <th>10</th>\n","      <td>789</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>585</td>\n","    </tr>\n","    <tr>\n","      <th>15</th>\n","      <td>548</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>36771</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>310095</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>354146</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>320489</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>328641</th>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>3429 rows × 1 columns</p>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":9}]},{"cell_type":"code","source":["df['To Bank'].value_counts()"],"metadata":{"execution":{"iopub.status.busy":"2024-05-17T14:50:23.105393Z","iopub.execute_input":"2024-05-17T14:50:23.105767Z","iopub.status.idle":"2024-05-17T14:50:23.118781Z","shell.execute_reply.started":"2024-05-17T14:50:23.105738Z","shell.execute_reply":"2024-05-17T14:50:23.117382Z"},"trusted":true,"id":"aOtfXFyqBOe-","executionInfo":{"status":"ok","timestamp":1747917898734,"user_tz":-120,"elapsed":28,"user":{"displayName":"","userId":""}},"outputId":"febbfa0d-60d0-48b7-a2ca-5d792bc71f39","colab":{"base_uri":"https://localhost:8080/","height":490}},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["To Bank\n","12        415\n","10        406\n","15        397\n","220       321\n","1         292\n","         ... \n","39350       1\n","310723      1\n","325507      1\n","3970        1\n","324050      1\n","Name: count, Length: 2135, dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>count</th>\n","    </tr>\n","    <tr>\n","      <th>To Bank</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>12</th>\n","      <td>415</td>\n","    </tr>\n","    <tr>\n","      <th>10</th>\n","      <td>406</td>\n","    </tr>\n","    <tr>\n","      <th>15</th>\n","      <td>397</td>\n","    </tr>\n","    <tr>\n","      <th>220</th>\n","      <td>321</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>292</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>39350</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>310723</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>325507</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3970</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>324050</th>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>2135 rows × 1 columns</p>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":10}]},{"cell_type":"code","source":["df[['Account', 'Account.1']].describe()"],"metadata":{"execution":{"iopub.status.busy":"2024-05-17T14:50:23.125208Z","iopub.execute_input":"2024-05-17T14:50:23.12564Z","iopub.status.idle":"2024-05-17T14:50:23.29195Z","shell.execute_reply.started":"2024-05-17T14:50:23.125609Z","shell.execute_reply":"2024-05-17T14:50:23.290848Z"},"trusted":true,"id":"F2CcsNZ5BOe-","executionInfo":{"status":"ok","timestamp":1747917906227,"user_tz":-120,"elapsed":432,"user":{"displayName":"","userId":""}},"outputId":"f077b357-06e9-4b8f-9615-cd86af071195","colab":{"base_uri":"https://localhost:8080/","height":175}},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["          Account  Account.1\n","count       50000      50000\n","unique      37434      44321\n","top     100428660  100428660\n","freq         1648         12"],"text/html":["\n","  <div id=\"df-6d07e324-9a8c-4e87-83fa-5dd781665a3e\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Account</th>\n","      <th>Account.1</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>50000</td>\n","      <td>50000</td>\n","    </tr>\n","    <tr>\n","      <th>unique</th>\n","      <td>37434</td>\n","      <td>44321</td>\n","    </tr>\n","    <tr>\n","      <th>top</th>\n","      <td>100428660</td>\n","      <td>100428660</td>\n","    </tr>\n","    <tr>\n","      <th>freq</th>\n","      <td>1648</td>\n","      <td>12</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6d07e324-9a8c-4e87-83fa-5dd781665a3e')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-6d07e324-9a8c-4e87-83fa-5dd781665a3e button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-6d07e324-9a8c-4e87-83fa-5dd781665a3e');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-63dde1a5-8761-44b5-a079-a4b486d29fbd\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-63dde1a5-8761-44b5-a079-a4b486d29fbd')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-63dde1a5-8761-44b5-a079-a4b486d29fbd button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"df[['Account', 'Account\",\n  \"rows\": 4,\n  \"fields\": [\n    {\n      \"column\": \"Account\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          37434,\n          \"1648\",\n          \"50000\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Account.1\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          44321,\n          \"12\",\n          \"50000\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":11}]},{"cell_type":"code","source":["df['Is Laundering'].value_counts()"],"metadata":{"execution":{"iopub.status.busy":"2024-05-17T14:50:23.293241Z","iopub.execute_input":"2024-05-17T14:50:23.293606Z","iopub.status.idle":"2024-05-17T14:50:23.303088Z","shell.execute_reply.started":"2024-05-17T14:50:23.293577Z","shell.execute_reply":"2024-05-17T14:50:23.301852Z"},"trusted":true,"id":"zIrxWRo-BOe_","executionInfo":{"status":"ok","timestamp":1747917909545,"user_tz":-120,"elapsed":18,"user":{"displayName":"","userId":""}},"outputId":"3e80f866-a921-4d04-e606-80fc5107369c","colab":{"base_uri":"https://localhost:8080/","height":178}},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Is Laundering\n","0    49934\n","1       66\n","Name: count, dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>count</th>\n","    </tr>\n","    <tr>\n","      <th>Is Laundering</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>49934</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>66</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":12}]},{"cell_type":"code","source":["sns.countplot(data=df, x='Is Laundering')"],"metadata":{"execution":{"iopub.status.busy":"2024-05-17T14:50:23.304968Z","iopub.execute_input":"2024-05-17T14:50:23.305438Z","iopub.status.idle":"2024-05-17T14:50:23.575867Z","shell.execute_reply.started":"2024-05-17T14:50:23.305394Z","shell.execute_reply":"2024-05-17T14:50:23.574686Z"},"trusted":true,"id":"WWRd9p7kBOe_","executionInfo":{"status":"ok","timestamp":1747917912165,"user_tz":-120,"elapsed":371,"user":{"displayName":"","userId":""}},"outputId":"9a86b206-13ac-4ce5-d584-6aefd43dd80b","colab":{"base_uri":"https://localhost:8080/","height":466}},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<Axes: xlabel='Is Laundering', ylabel='count'>"]},"metadata":{},"execution_count":13},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["## Dropping some columns\n","\n","cols_to_drop = ['Timestamp', 'Amount Paid', 'Payment Currency']\n","\n","df.drop(cols_to_drop, axis=1, inplace=True)\n","\n","df.head(2)"],"metadata":{"execution":{"iopub.status.busy":"2024-05-17T14:50:23.577517Z","iopub.execute_input":"2024-05-17T14:50:23.578619Z","iopub.status.idle":"2024-05-17T14:50:23.599681Z","shell.execute_reply.started":"2024-05-17T14:50:23.578528Z","shell.execute_reply":"2024-05-17T14:50:23.598756Z"},"trusted":true,"id":"nqHhm7x6BOe_","executionInfo":{"status":"ok","timestamp":1747917918963,"user_tz":-120,"elapsed":302,"user":{"displayName":"","userId":""}},"outputId":"07e13340-5bdb-40fb-fa10-51559a0bc4e3","colab":{"base_uri":"https://localhost:8080/","height":112}},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["         From Bank    Account  To Bank  Account.1  Amount Received  \\\n","4205263         70  100428A08   148586  8120D5550         13204.53   \n","3270156       1132  80C50E4A0       28  80B7644F0           329.94   \n","\n","        Receiving Currency Payment Format  Is Laundering  \n","4205263        Saudi Riyal           Cash              0  \n","3270156       Mexican Peso    Credit Card              0  "],"text/html":["\n","  <div id=\"df-2cfc08a0-1adf-44d7-b13b-e276ad662b4c\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>From Bank</th>\n","      <th>Account</th>\n","      <th>To Bank</th>\n","      <th>Account.1</th>\n","      <th>Amount Received</th>\n","      <th>Receiving Currency</th>\n","      <th>Payment Format</th>\n","      <th>Is Laundering</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>4205263</th>\n","      <td>70</td>\n","      <td>100428A08</td>\n","      <td>148586</td>\n","      <td>8120D5550</td>\n","      <td>13204.53</td>\n","      <td>Saudi Riyal</td>\n","      <td>Cash</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3270156</th>\n","      <td>1132</td>\n","      <td>80C50E4A0</td>\n","      <td>28</td>\n","      <td>80B7644F0</td>\n","      <td>329.94</td>\n","      <td>Mexican Peso</td>\n","      <td>Credit Card</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2cfc08a0-1adf-44d7-b13b-e276ad662b4c')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-2cfc08a0-1adf-44d7-b13b-e276ad662b4c button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-2cfc08a0-1adf-44d7-b13b-e276ad662b4c');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-0a527bfd-cb77-402c-9b9d-80941fc13a27\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-0a527bfd-cb77-402c-9b9d-80941fc13a27')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-0a527bfd-cb77-402c-9b9d-80941fc13a27 button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df","summary":"{\n  \"name\": \"df\",\n  \"rows\": 50000,\n  \"fields\": [\n    {\n      \"column\": \"From Bank\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 81779,\n        \"min\": 1,\n        \"max\": 356233,\n        \"num_unique_values\": 3429,\n        \"samples\": [\n          27637,\n          341471,\n          226951\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Account\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 37434,\n        \"samples\": [\n          \"8040D5D80\",\n          \"813444561\",\n          \"80F122100\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"To Bank\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 84153,\n        \"min\": 1,\n        \"max\": 355371,\n        \"num_unique_values\": 2135,\n        \"samples\": [\n          251027,\n          235843,\n          310468\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Account.1\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 44321,\n        \"samples\": [\n          \"81077B5F0\",\n          \"80A78E800\",\n          \"8037AC7F0\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Amount Received\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 571286671.5467044,\n        \"min\": 1e-06,\n        \"max\": 119057635620.93,\n        \"num_unique_values\": 44635,\n        \"samples\": [\n          8655.58,\n          251982.1,\n          4347.6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Receiving Currency\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 15,\n        \"samples\": [\n          \"Ruble\",\n          \"Bitcoin\",\n          \"Saudi Riyal\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Payment Format\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 7,\n        \"samples\": [\n          \"Cash\",\n          \"Credit Card\",\n          \"Wire\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Is Laundering\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":14}]},{"cell_type":"code","source":["numeric_cols = df.select_dtypes(exclude=\"object\").columns\n","\n","numeric_cols"],"metadata":{"execution":{"iopub.status.busy":"2024-05-17T14:50:23.601179Z","iopub.execute_input":"2024-05-17T14:50:23.601796Z","iopub.status.idle":"2024-05-17T14:50:23.610683Z","shell.execute_reply.started":"2024-05-17T14:50:23.601765Z","shell.execute_reply":"2024-05-17T14:50:23.609172Z"},"trusted":true,"id":"xRq5DHvQBOfA","executionInfo":{"status":"ok","timestamp":1747917928814,"user_tz":-120,"elapsed":25,"user":{"displayName":"","userId":""}},"outputId":"772f4611-a3ca-445d-a73f-c309b1020318","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['From Bank', 'To Bank', 'Amount Received', 'Is Laundering'], dtype='object')"]},"metadata":{},"execution_count":15}]},{"cell_type":"code","source":["categorical_cols = df.select_dtypes(include=\"object\").columns\n","\n","categorical_cols"],"metadata":{"execution":{"iopub.status.busy":"2024-05-17T14:50:23.612603Z","iopub.execute_input":"2024-05-17T14:50:23.612982Z","iopub.status.idle":"2024-05-17T14:50:23.628668Z","shell.execute_reply.started":"2024-05-17T14:50:23.612953Z","shell.execute_reply":"2024-05-17T14:50:23.627454Z"},"trusted":true,"id":"pzDfx4mvBOfA","executionInfo":{"status":"ok","timestamp":1747917931409,"user_tz":-120,"elapsed":25,"user":{"displayName":"","userId":""}},"outputId":"3ca97860-8a38-4a76-bb4f-b37a01b3180d","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['Account', 'Account.1', 'Receiving Currency', 'Payment Format'], dtype='object')"]},"metadata":{},"execution_count":16}]},{"cell_type":"code","source":["## Unique columns in df\n","\n","unique_counts = df[categorical_cols].nunique()\n","print(\"Unique columns in the DataFrame: \\n\", unique_counts)"],"metadata":{"execution":{"iopub.status.busy":"2024-05-17T14:50:23.630244Z","iopub.execute_input":"2024-05-17T14:50:23.630634Z","iopub.status.idle":"2024-05-17T14:50:23.719969Z","shell.execute_reply.started":"2024-05-17T14:50:23.630604Z","shell.execute_reply":"2024-05-17T14:50:23.718509Z"},"trusted":true,"id":"vdBdQ63pBOfA","executionInfo":{"status":"ok","timestamp":1747917933742,"user_tz":-120,"elapsed":219,"user":{"displayName":"","userId":""}},"outputId":"de9551fe-353e-440b-eb82-f6f6fca89d9b","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Unique columns in the DataFrame: \n"," Account               37434\n","Account.1             44321\n","Receiving Currency       15\n","Payment Format            7\n","dtype: int64\n"]}]},{"cell_type":"code","source":["df.head(3)"],"metadata":{"execution":{"iopub.status.busy":"2024-05-17T14:50:23.721927Z","iopub.execute_input":"2024-05-17T14:50:23.724708Z","iopub.status.idle":"2024-05-17T14:50:23.74066Z","shell.execute_reply.started":"2024-05-17T14:50:23.724661Z","shell.execute_reply":"2024-05-17T14:50:23.739381Z"},"trusted":true,"id":"luyE-jp4BOfB","executionInfo":{"status":"ok","timestamp":1747917941869,"user_tz":-120,"elapsed":316,"user":{"displayName":"","userId":""}},"outputId":"ca702f5b-5cdc-4a61-ad44-63b2344d54ba","colab":{"base_uri":"https://localhost:8080/","height":143}},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["         From Bank    Account  To Bank  Account.1  Amount Received  \\\n","4205263         70  100428A08   148586  8120D5550         13204.53   \n","3270156       1132  80C50E4A0       28  80B7644F0           329.94   \n","2669041         70  1004288E8    32814  80C1FC0D0         54497.52   \n","\n","        Receiving Currency Payment Format  Is Laundering  \n","4205263        Saudi Riyal           Cash              0  \n","3270156       Mexican Peso    Credit Card              0  \n","2669041       Mexican Peso    Credit Card              0  "],"text/html":["\n","  <div id=\"df-8706d40f-e154-4d09-9c4f-4cfb86cee395\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>From Bank</th>\n","      <th>Account</th>\n","      <th>To Bank</th>\n","      <th>Account.1</th>\n","      <th>Amount Received</th>\n","      <th>Receiving Currency</th>\n","      <th>Payment Format</th>\n","      <th>Is Laundering</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>4205263</th>\n","      <td>70</td>\n","      <td>100428A08</td>\n","      <td>148586</td>\n","      <td>8120D5550</td>\n","      <td>13204.53</td>\n","      <td>Saudi Riyal</td>\n","      <td>Cash</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3270156</th>\n","      <td>1132</td>\n","      <td>80C50E4A0</td>\n","      <td>28</td>\n","      <td>80B7644F0</td>\n","      <td>329.94</td>\n","      <td>Mexican Peso</td>\n","      <td>Credit Card</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2669041</th>\n","      <td>70</td>\n","      <td>1004288E8</td>\n","      <td>32814</td>\n","      <td>80C1FC0D0</td>\n","      <td>54497.52</td>\n","      <td>Mexican Peso</td>\n","      <td>Credit Card</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8706d40f-e154-4d09-9c4f-4cfb86cee395')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-8706d40f-e154-4d09-9c4f-4cfb86cee395 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-8706d40f-e154-4d09-9c4f-4cfb86cee395');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-c7e9397a-af43-45da-a1ef-a8e703de307a\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c7e9397a-af43-45da-a1ef-a8e703de307a')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-c7e9397a-af43-45da-a1ef-a8e703de307a button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df","summary":"{\n  \"name\": \"df\",\n  \"rows\": 50000,\n  \"fields\": [\n    {\n      \"column\": \"From Bank\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 81779,\n        \"min\": 1,\n        \"max\": 356233,\n        \"num_unique_values\": 3429,\n        \"samples\": [\n          27637,\n          341471,\n          226951\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Account\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 37434,\n        \"samples\": [\n          \"8040D5D80\",\n          \"813444561\",\n          \"80F122100\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"To Bank\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 84153,\n        \"min\": 1,\n        \"max\": 355371,\n        \"num_unique_values\": 2135,\n        \"samples\": [\n          251027,\n          235843,\n          310468\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Account.1\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 44321,\n        \"samples\": [\n          \"81077B5F0\",\n          \"80A78E800\",\n          \"8037AC7F0\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Amount Received\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 571286671.5467044,\n        \"min\": 1e-06,\n        \"max\": 119057635620.93,\n        \"num_unique_values\": 44635,\n        \"samples\": [\n          8655.58,\n          251982.1,\n          4347.6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Receiving Currency\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 15,\n        \"samples\": [\n          \"Ruble\",\n          \"Bitcoin\",\n          \"Saudi Riyal\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Payment Format\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 7,\n        \"samples\": [\n          \"Cash\",\n          \"Credit Card\",\n          \"Wire\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Is Laundering\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":18}]},{"cell_type":"code","source":["df.columns"],"metadata":{"execution":{"iopub.status.busy":"2024-05-17T14:50:23.742197Z","iopub.execute_input":"2024-05-17T14:50:23.742533Z","iopub.status.idle":"2024-05-17T14:50:23.749977Z","shell.execute_reply.started":"2024-05-17T14:50:23.742507Z","shell.execute_reply":"2024-05-17T14:50:23.748737Z"},"trusted":true,"id":"XkbHaisSBOfB","executionInfo":{"status":"ok","timestamp":1747917944678,"user_tz":-120,"elapsed":46,"user":{"displayName":"","userId":""}},"outputId":"998bf6ff-1a23-4cc2-c42d-e374b98351bf","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['From Bank', 'Account', 'To Bank', 'Account.1', 'Amount Received',\n","       'Receiving Currency', 'Payment Format', 'Is Laundering'],\n","      dtype='object')"]},"metadata":{},"execution_count":19}]},{"cell_type":"code","source":["df['Receiving Currency'].value_counts()"],"metadata":{"execution":{"iopub.status.busy":"2024-05-17T14:50:23.751881Z","iopub.execute_input":"2024-05-17T14:50:23.752342Z","iopub.status.idle":"2024-05-17T14:50:23.772209Z","shell.execute_reply.started":"2024-05-17T14:50:23.752285Z","shell.execute_reply":"2024-05-17T14:50:23.771384Z"},"trusted":true,"id":"gKfntI0UBOfB","executionInfo":{"status":"ok","timestamp":1747917951247,"user_tz":-120,"elapsed":14,"user":{"displayName":"","userId":""}},"outputId":"caaccd77-5ead-4744-ce08-062024f0fbf4","colab":{"base_uri":"https://localhost:8080/","height":586}},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Receiving Currency\n","US Dollar            18395\n","Euro                 11583\n","Swiss Franc           2444\n","Yuan                  1977\n","Shekel                1923\n","UK Pound              1819\n","Rupee                 1804\n","Yen                   1578\n","Ruble                 1564\n","Bitcoin               1483\n","Australian Dollar     1401\n","Canadian Dollar       1342\n","Mexican Peso          1110\n","Saudi Riyal            860\n","Brazil Real            717\n","Name: count, dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>count</th>\n","    </tr>\n","    <tr>\n","      <th>Receiving Currency</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>US Dollar</th>\n","      <td>18395</td>\n","    </tr>\n","    <tr>\n","      <th>Euro</th>\n","      <td>11583</td>\n","    </tr>\n","    <tr>\n","      <th>Swiss Franc</th>\n","      <td>2444</td>\n","    </tr>\n","    <tr>\n","      <th>Yuan</th>\n","      <td>1977</td>\n","    </tr>\n","    <tr>\n","      <th>Shekel</th>\n","      <td>1923</td>\n","    </tr>\n","    <tr>\n","      <th>UK Pound</th>\n","      <td>1819</td>\n","    </tr>\n","    <tr>\n","      <th>Rupee</th>\n","      <td>1804</td>\n","    </tr>\n","    <tr>\n","      <th>Yen</th>\n","      <td>1578</td>\n","    </tr>\n","    <tr>\n","      <th>Ruble</th>\n","      <td>1564</td>\n","    </tr>\n","    <tr>\n","      <th>Bitcoin</th>\n","      <td>1483</td>\n","    </tr>\n","    <tr>\n","      <th>Australian Dollar</th>\n","      <td>1401</td>\n","    </tr>\n","    <tr>\n","      <th>Canadian Dollar</th>\n","      <td>1342</td>\n","    </tr>\n","    <tr>\n","      <th>Mexican Peso</th>\n","      <td>1110</td>\n","    </tr>\n","    <tr>\n","      <th>Saudi Riyal</th>\n","      <td>860</td>\n","    </tr>\n","    <tr>\n","      <th>Brazil Real</th>\n","      <td>717</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":20}]},{"cell_type":"code","source":["df.isnull().sum()"],"metadata":{"execution":{"iopub.status.busy":"2024-05-17T14:50:23.77342Z","iopub.execute_input":"2024-05-17T14:50:23.773923Z","iopub.status.idle":"2024-05-17T14:50:23.811848Z","shell.execute_reply.started":"2024-05-17T14:50:23.773896Z","shell.execute_reply":"2024-05-17T14:50:23.810331Z"},"trusted":true,"id":"AbIaH556BOfB","executionInfo":{"status":"ok","timestamp":1747917958435,"user_tz":-120,"elapsed":132,"user":{"displayName":"","userId":""}},"outputId":"a921073e-417f-49c9-e975-187d6ef6b70a","colab":{"base_uri":"https://localhost:8080/","height":335}},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["From Bank             0\n","Account               0\n","To Bank               0\n","Account.1             0\n","Amount Received       0\n","Receiving Currency    0\n","Payment Format        0\n","Is Laundering         0\n","dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>From Bank</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Account</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>To Bank</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Account.1</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Amount Received</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Receiving Currency</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Payment Format</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Is Laundering</th>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":21}]},{"cell_type":"markdown","source":["## Dividing into Independent and Dependent features"],"metadata":{"id":"QZKjWt3LBOfN"}},{"cell_type":"code","source":["X = df.drop(columns=[\"Is Laundering\"], axis=1)\n","y = df[\"Is Laundering\"]"],"metadata":{"execution":{"iopub.status.busy":"2024-05-17T14:50:23.813424Z","iopub.execute_input":"2024-05-17T14:50:23.813892Z","iopub.status.idle":"2024-05-17T14:50:23.826421Z","shell.execute_reply.started":"2024-05-17T14:50:23.813854Z","shell.execute_reply":"2024-05-17T14:50:23.825185Z"},"trusted":true,"id":"LR0Pn7C-BOfN"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["numerical_features = X.select_dtypes(exclude=\"object\").columns\n","\n","numerical_features"],"metadata":{"execution":{"iopub.status.busy":"2024-05-17T14:50:23.827993Z","iopub.execute_input":"2024-05-17T14:50:23.828547Z","iopub.status.idle":"2024-05-17T14:50:23.838659Z","shell.execute_reply.started":"2024-05-17T14:50:23.828504Z","shell.execute_reply":"2024-05-17T14:50:23.83738Z"},"trusted":true,"id":"--ru9P6DBOfN","executionInfo":{"status":"ok","timestamp":1747918026903,"user_tz":-120,"elapsed":17,"user":{"displayName":"","userId":""}},"outputId":"a2d9df85-3ca4-445a-aa37-ecff104cc4b0","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['From Bank', 'To Bank', 'Amount Received'], dtype='object')"]},"metadata":{},"execution_count":23}]},{"cell_type":"code","source":["categorical_features = X.select_dtypes(include=\"object\").columns\n","\n","categorical_features"],"metadata":{"execution":{"iopub.status.busy":"2024-05-17T14:50:23.840077Z","iopub.execute_input":"2024-05-17T14:50:23.840533Z","iopub.status.idle":"2024-05-17T14:50:23.861584Z","shell.execute_reply.started":"2024-05-17T14:50:23.840493Z","shell.execute_reply":"2024-05-17T14:50:23.860376Z"},"trusted":true,"id":"e5k1EmnCBOfO","executionInfo":{"status":"ok","timestamp":1747918029061,"user_tz":-120,"elapsed":27,"user":{"displayName":"","userId":""}},"outputId":"c694d5bd-1101-497c-a619-eb62ced82e3e","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['Account', 'Account.1', 'Receiving Currency', 'Payment Format'], dtype='object')"]},"metadata":{},"execution_count":24}]},{"cell_type":"markdown","source":["## Defining the Pipeline"],"metadata":{"id":"jDVydIZABOfO"}},{"cell_type":"code","source":["## Define the pipeline\n","\n","num_pipeline = Pipeline(\n","    steps=[\n","        (\"imputer\", SimpleImputer(strategy=\"median\")),\n","        (\"scaler\", RobustScaler())\n","    ]\n",")\n","\n","cat_pipeline = Pipeline(\n","    steps=[\n","        (\"imputer\", SimpleImputer(strategy=\"most_frequent\")),\n","        (\"ordinalencoder\", OrdinalEncoder()),\n","    ]\n",")"],"metadata":{"execution":{"iopub.status.busy":"2024-05-17T14:50:23.863129Z","iopub.execute_input":"2024-05-17T14:50:23.86362Z","iopub.status.idle":"2024-05-17T14:50:23.874656Z","shell.execute_reply.started":"2024-05-17T14:50:23.863589Z","shell.execute_reply":"2024-05-17T14:50:23.873232Z"},"trusted":true,"id":"2GqQkHJaBOfO"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["transformer = ColumnTransformer(transformers=[\n","    (\"OrdinalEncoder\", OrdinalEncoder(handle_unknown='use_encoded_value', unknown_value=-1), categorical_features),\n","    (\"RobustScaler\", RobustScaler(), numerical_features)\n","], remainder=\"passthrough\")"],"metadata":{"execution":{"iopub.status.busy":"2024-05-17T14:50:23.876479Z","iopub.execute_input":"2024-05-17T14:50:23.87692Z","iopub.status.idle":"2024-05-17T14:50:23.886519Z","shell.execute_reply.started":"2024-05-17T14:50:23.876891Z","shell.execute_reply":"2024-05-17T14:50:23.885518Z"},"trusted":true,"id":"dJPcGsY5BOfO"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)"],"metadata":{"execution":{"iopub.status.busy":"2024-05-17T14:50:23.887844Z","iopub.execute_input":"2024-05-17T14:50:23.888784Z","iopub.status.idle":"2024-05-17T14:50:23.914386Z","shell.execute_reply.started":"2024-05-17T14:50:23.888743Z","shell.execute_reply":"2024-05-17T14:50:23.913396Z"},"trusted":true,"id":"v4C11rHZBOfP"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["X_train = transformer.fit_transform(X_train)\n","X_test = transformer.transform(X_test)"],"metadata":{"execution":{"iopub.status.busy":"2024-05-17T14:50:23.915721Z","iopub.execute_input":"2024-05-17T14:50:23.916696Z","iopub.status.idle":"2024-05-17T14:50:24.745232Z","shell.execute_reply.started":"2024-05-17T14:50:23.916655Z","shell.execute_reply":"2024-05-17T14:50:24.744001Z"},"trusted":true,"id":"1w9Aaty7BOfP"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["X_train.shape, X_test.shape"],"metadata":{"execution":{"iopub.status.busy":"2024-05-17T14:50:24.751769Z","iopub.execute_input":"2024-05-17T14:50:24.752153Z","iopub.status.idle":"2024-05-17T14:50:24.758871Z","shell.execute_reply.started":"2024-05-17T14:50:24.752125Z","shell.execute_reply":"2024-05-17T14:50:24.757541Z"},"trusted":true,"id":"6fk0NFP0BOfP","executionInfo":{"status":"ok","timestamp":1747918043852,"user_tz":-120,"elapsed":42,"user":{"displayName":"","userId":""}},"outputId":"ac8f9ab5-a9c4-493b-cf6a-cd3986dcfc06","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["((40000, 7), (10000, 7))"]},"metadata":{},"execution_count":29}]},{"cell_type":"markdown","source":["## Training Base Model"],"metadata":{"id":"gz_5aBaMBOfQ"}},{"cell_type":"code","source":["param_grid = {\n","    'max_depth': [4,8,16],\n","    'eta': [0.1,0.2,0.3],\n","}\n","\n","xgb = XGBClassifier(eval_metric='logloss', random_state=42)\n","\n","grid_search = GridSearchCV(\n","    estimator=xgb,\n","    param_grid=param_grid,\n","    scoring='roc_auc',\n","    cv=2,\n","    verbose=2\n",")\n","\n","grid_search.fit(X_train, y_train)\n","\n","print(\"Best Parameters: \", grid_search.best_params_)\n","\n","best_model = grid_search.best_estimator_\n","\n","y_pred = best_model.predict_proba(X_test)[:, 1]\n","test_auc = roc_auc_score(y_test, y_pred)\n","print(\"Test AUC: \", test_auc)"],"metadata":{"execution":{"iopub.status.busy":"2024-05-17T14:50:24.760595Z","iopub.execute_input":"2024-05-17T14:50:24.761044Z","iopub.status.idle":"2024-05-17T14:50:29.00095Z","shell.execute_reply.started":"2024-05-17T14:50:24.761004Z","shell.execute_reply":"2024-05-17T14:50:28.999746Z"},"trusted":true,"id":"7YaDmld2BOfQ","executionInfo":{"status":"ok","timestamp":1747918055482,"user_tz":-120,"elapsed":6093,"user":{"displayName":"","userId":""}},"outputId":"2e35e71d-934c-446a-e01c-af9ee2f994ec","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Fitting 2 folds for each of 9 candidates, totalling 18 fits\n","[CV] END ...............................eta=0.1, max_depth=4; total time=   0.3s\n","[CV] END ...............................eta=0.1, max_depth=4; total time=   0.4s\n","[CV] END ...............................eta=0.1, max_depth=8; total time=   0.9s\n","[CV] END ...............................eta=0.1, max_depth=8; total time=   0.8s\n","[CV] END ..............................eta=0.1, max_depth=16; total time=   0.6s\n","[CV] END ..............................eta=0.1, max_depth=16; total time=   0.2s\n","[CV] END ...............................eta=0.2, max_depth=4; total time=   0.2s\n","[CV] END ...............................eta=0.2, max_depth=4; total time=   0.2s\n","[CV] END ...............................eta=0.2, max_depth=8; total time=   0.2s\n","[CV] END ...............................eta=0.2, max_depth=8; total time=   0.2s\n","[CV] END ..............................eta=0.2, max_depth=16; total time=   0.2s\n","[CV] END ..............................eta=0.2, max_depth=16; total time=   0.2s\n","[CV] END ...............................eta=0.3, max_depth=4; total time=   0.2s\n","[CV] END ...............................eta=0.3, max_depth=4; total time=   0.2s\n","[CV] END ...............................eta=0.3, max_depth=8; total time=   0.2s\n","[CV] END ...............................eta=0.3, max_depth=8; total time=   0.2s\n","[CV] END ..............................eta=0.3, max_depth=16; total time=   0.3s\n","[CV] END ..............................eta=0.3, max_depth=16; total time=   0.2s\n","Best Parameters:  {'eta': 0.1, 'max_depth': 4}\n","Test AUC:  0.9215938027524249\n"]}]},{"cell_type":"code","source":["from sklearn.metrics import roc_curve, roc_auc_score\n","\n","test_probabilities = best_model.predict_proba(X_test)[:, 1]\n","\n","test_auc = roc_auc_score(y_test, test_probabilities)\n","print(\"Test Set AUC: \", test_auc)\n","\n","fpr, tpr, thresholds = roc_curve(y_test, test_probabilities)\n","\n","plt.figure()\n","plt.plot(fpr, tpr, color='darkorange', lw=2, label='ROC curve (area = %0.2f)' % test_auc)\n","plt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--')\n","plt.xlim([0.0, 1.0])\n","plt.ylim([0.0, 1.05])\n","plt.xlabel('False Positive Rate')\n","plt.ylabel('True Positive Rate')\n","plt.title('Receiver Operating Characteristic')\n","plt.legend(loc=\"lower right\")\n","plt.show();"],"metadata":{"execution":{"iopub.status.busy":"2024-05-17T14:50:29.002897Z","iopub.execute_input":"2024-05-17T14:50:29.003668Z","iopub.status.idle":"2024-05-17T14:50:29.356068Z","shell.execute_reply.started":"2024-05-17T14:50:29.003626Z","shell.execute_reply":"2024-05-17T14:50:29.354903Z"},"trusted":true,"id":"kohet3WyBOfR","executionInfo":{"status":"ok","timestamp":1747918063380,"user_tz":-120,"elapsed":452,"user":{"displayName":"","userId":""}},"outputId":"cd72a569-4704-403b-e1c0-2aa17a5cdd4f","colab":{"base_uri":"https://localhost:8080/","height":489}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Test Set AUC:  0.9215938027524249\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["# Confusion Matrix, TPR, and FPR at around a TPR of 0.87\n","desired_tpr = 0.92\n","closest_threshold = thresholds[np.argmin(np.abs(tpr - desired_tpr))]\n","print(f\"Desired TPR of around 90%:\")\n","\n","y_pred = (test_probabilities >= closest_threshold).astype(int)\n","cm = confusion_matrix(y_test, y_pred)\n","\n","plt.figure(figsize=(7,5))\n","sns.heatmap(cm, annot=True, fmt=\"d\", cmap=\"Blues\")\n","plt.xlabel('Predicted labels')\n","plt.ylabel('True labels')\n","plt.title(f'Confusion Matrix at {desired_tpr*100}% TPR')\n","plt.show()\n","\n","tn, fp, fn, tp = cm.ravel()\n","fpr_cm = fp / (fp + tn)\n","tpr_cm = tp / (tp + fn)\n","\n","print(f\"False Positive Rate (FPR): {fpr_cm:.3f}\")\n","print(f\"True Positive Rate (TPR): {tpr_cm:.3f}\")"],"metadata":{"execution":{"iopub.status.busy":"2024-05-17T14:50:29.35786Z","iopub.execute_input":"2024-05-17T14:50:29.359069Z","iopub.status.idle":"2024-05-17T14:50:29.668942Z","shell.execute_reply.started":"2024-05-17T14:50:29.359027Z","shell.execute_reply":"2024-05-17T14:50:29.66775Z"},"trusted":true,"id":"9iYouZGDBOfR","executionInfo":{"status":"ok","timestamp":1747918070897,"user_tz":-120,"elapsed":379,"user":{"displayName":"","userId":""}},"outputId":"c2866984-7f77-4dde-eeae-a8eb0fdd530e","colab":{"base_uri":"https://localhost:8080/","height":539}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Desired TPR of around 90%:\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 700x500 with 2 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["False Positive Rate (FPR): 0.055\n","True Positive Rate (TPR): 0.929\n"]}]},{"cell_type":"code","source":["from sklearn.metrics import classification_report\n","\n","print(classification_report(y_test, y_pred))"],"metadata":{"execution":{"iopub.status.busy":"2024-05-17T14:50:29.670856Z","iopub.execute_input":"2024-05-17T14:50:29.671696Z","iopub.status.idle":"2024-05-17T14:50:29.700847Z","shell.execute_reply.started":"2024-05-17T14:50:29.671654Z","shell.execute_reply":"2024-05-17T14:50:29.699485Z"},"trusted":true,"id":"yn_X72UhBOfR","executionInfo":{"status":"ok","timestamp":1747918078357,"user_tz":-120,"elapsed":16,"user":{"displayName":"","userId":""}},"outputId":"7c2fd6b9-2c8d-48b3-c56b-030549bf0790","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["              precision    recall  f1-score   support\n","\n","           0       1.00      0.94      0.97      9986\n","           1       0.02      0.93      0.04        14\n","\n","    accuracy                           0.94     10000\n","   macro avg       0.51      0.94      0.51     10000\n","weighted avg       1.00      0.94      0.97     10000\n","\n"]}]},{"cell_type":"markdown","source":["## Handling Data Imbalance using SMOTE"],"metadata":{"id":"xBXFhwF6BOfR"}},{"cell_type":"code","source":["# upsampling using smote\n","# upsampling using smote\n","\n","from imblearn.over_sampling import SMOTE\n","from collections import Counter\n","\n","counter = Counter(y_train)\n","\n","print(\"=============================\")\n","\n","for k,v in counter.items():\n","    per = 100*v/len(y_train)\n","    print(f\"Class= {k}, n={v} ({per:.2f}%)\")\n","\n","oversample = SMOTE()\n","X_train_os, y_train_os = oversample.fit_resample(X_train, y_train)\n","\n","counter = Counter(y_train_os)\n","\n","print(\"=============================\")\n","\n","for k,v in counter.items():\n","    per = 100*v/len(y_train)\n","    print(f\"Class= {k}, n={v} ({per:.2f}%)\")\n","\n","print(\"=============================\")\n","\n","print(\"Upsampled data shape: \", X_train_os.shape, y_train_os.shape)"],"metadata":{"execution":{"iopub.status.busy":"2024-05-17T14:50:29.702816Z","iopub.execute_input":"2024-05-17T14:50:29.703259Z","iopub.status.idle":"2024-05-17T14:50:29.755807Z","shell.execute_reply.started":"2024-05-17T14:50:29.70322Z","shell.execute_reply":"2024-05-17T14:50:29.754372Z"},"trusted":true,"id":"sIfS5X0UBOfj","executionInfo":{"status":"ok","timestamp":1747918081080,"user_tz":-120,"elapsed":67,"user":{"displayName":"","userId":""}},"outputId":"175f20e4-528b-4bf6-9da8-098310abdef8","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["=============================\n","Class= 0, n=39948 (99.87%)\n","Class= 1, n=52 (0.13%)\n","=============================\n","Class= 0, n=39948 (99.87%)\n","Class= 1, n=39948 (99.87%)\n","=============================\n","Upsampled data shape:  (79896, 7) (79896,)\n"]}]},{"cell_type":"code","source":["from collections import Counter\n","\n","# Assuming 'y' is your target variable\n","class_distribution = Counter(y_train_os)\n","\n","# Print the class distribution\n","for class_label, count in class_distribution.items():\n","    print(f\"Class {class_label}: {count} samples\")\n","\n","# Check if 'y' is balanced\n","is_balanced = all(count == class_distribution[y_train_os[0]] for count in class_distribution.values())\n","\n","if is_balanced:\n","    print(\"The target variable 'y' is balanced.\")\n","else:\n","    print(\"The target variable 'y' is imbalanced.\")"],"metadata":{"execution":{"iopub.status.busy":"2024-05-17T14:50:29.757392Z","iopub.execute_input":"2024-05-17T14:50:29.757832Z","iopub.status.idle":"2024-05-17T14:50:29.782688Z","shell.execute_reply.started":"2024-05-17T14:50:29.757792Z","shell.execute_reply":"2024-05-17T14:50:29.780955Z"},"trusted":true,"id":"KkWf5IcJBOfk","executionInfo":{"status":"ok","timestamp":1747918094780,"user_tz":-120,"elapsed":16,"user":{"displayName":"","userId":""}},"outputId":"16a90f87-95fb-47f5-f587-e781a8ead770","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Class 0: 39948 samples\n","Class 1: 39948 samples\n","The target variable 'y' is balanced.\n"]}]},{"cell_type":"code","source":["def fit_classification_models(X, y, test_size=0.2, random_state=42):\n","    \"\"\"\n","    Fit classification models using XGBoost, RandomForest, and ExtraTrees classifiers.\n","\n","    Parameters:\n","    -----------\n","    X : array-like of shape (n_samples, n_features)\n","        The input data.\n","\n","    y : array-like of shape (n_samples,)\n","        The target variable.\n","\n","    test_size : float, default=0.2\n","        The proportion of the dataset to include in the test split.\n","\n","    random_state : int, default=42\n","        Controls the randomness of the dataset splitting.\n","\n","    Returns:\n","    --------\n","    results : dict\n","        A dictionary containing the performance metrics for XGBoost, RandomForest, and ExtraTrees classifiers,\n","        including training and testing results along with confusion matrices and classification reports.\n","    \"\"\"\n","\n","    # Split the dataset into training and testing sets\n","    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=test_size, random_state=random_state)\n","\n","    # Create pipelines for XGBoost, RandomForest, and ExtraTrees classifiers\n","    pipelines = {\n","        'XGBoost': Pipeline([('scaler', RobustScaler()), ('classifier', XGBClassifier())]),\n","        'Random Forest': Pipeline([('scaler', RobustScaler()), ('classifier', RandomForestClassifier())]),\n","        'ExtraTreesClassifier': Pipeline([('scaler', RobustScaler()), ('classifier', ExtraTreesClassifier())]),\n","    }\n","\n","    # Fit and evaluate XGBoost, RandomForest, and ExtraTrees classifiers\n","    results = {}\n","\n","    for classifier_name, pipeline in pipelines.items():\n","        pipeline.fit(X_train, y_train)\n","\n","        # Training results\n","        y_train_pred = pipeline.predict(X_train)\n","        train_precision = round(precision_score(y_train, y_train_pred, average=\"weighted\") * 100, 1)\n","        train_recall = round(recall_score(y_train, y_train_pred, average=\"weighted\") * 100, 1)\n","        train_f1 = round(f1_score(y_train, y_train_pred, average=\"weighted\") * 100, 1)\n","        train_conf_matrix = confusion_matrix(y_train, y_train_pred)\n","        train_classification_report = classification_report(y_train, y_train_pred, output_dict=True)\n","\n","        # Testing results\n","        y_test_pred = pipeline.predict(X_test)\n","        test_precision = round(precision_score(y_test, y_test_pred, average=\"weighted\") * 100, 1)\n","        test_recall = round(recall_score(y_test, y_test_pred, average=\"weighted\") * 100, 1)\n","        test_f1 = round(f1_score(y_test, y_test_pred, average=\"weighted\") * 100, 1)\n","        test_conf_matrix = confusion_matrix(y_test, y_test_pred)\n","        test_classification_report = classification_report(y_test, y_test_pred, output_dict=True)\n","\n","        results[classifier_name] = {\n","            'training': {\n","                'precision': train_precision,\n","                'recall': train_recall,\n","                'f1-score': train_f1,\n","                'confusion_matrix': train_conf_matrix,\n","                'classification_report': train_classification_report\n","            },\n","            'testing': {\n","                'precision': test_precision,\n","                'recall': test_recall,\n","                'f1-score': test_f1,\n","                'confusion_matrix': test_conf_matrix,\n","                'classification_report': test_classification_report\n","            }\n","        }\n","\n","    return results\n"],"metadata":{"execution":{"iopub.status.busy":"2024-05-17T14:50:29.784628Z","iopub.execute_input":"2024-05-17T14:50:29.785115Z","iopub.status.idle":"2024-05-17T14:50:29.805172Z","shell.execute_reply.started":"2024-05-17T14:50:29.785075Z","shell.execute_reply":"2024-05-17T14:50:29.803542Z"},"trusted":true,"id":"6zB6gLlKBOfk"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Call fit_classification_models() function to generate results\n","results = fit_classification_models(X_train_os, y_train_os)\n","\n","# Plot confusion matrices and display DataFrame for each algorithm\n","for classifier_name, metrics in results.items():\n","    print(f\"Algorithm: {classifier_name}\")\n","\n","    # Display DataFrame\n","    df = pd.DataFrame({\n","        'Metric': ['Precision', 'Recall', 'F1-score'],\n","        'Training': [metrics['training']['precision'], metrics['training']['recall'], metrics['training']['f1-score']],\n","        'Testing': [metrics['testing']['precision'], metrics['testing']['recall'], metrics['testing']['f1-score']]\n","    })\n","    print(df)\n","    print(\"\\n\")\n","\n","    # Plot confusion matrices\n","    fig, axes = plt.subplots(1, 2, figsize=(15, 5))\n","\n","    # Training confusion matrix\n","    sns.heatmap(metrics['training']['confusion_matrix'], annot=True, fmt='d', cmap='Blues', ax=axes[0])\n","    axes[0].set_title('Training Confusion Matrix')\n","    axes[0].set_xlabel('Predicted Label')\n","    axes[0].set_ylabel('True Label')\n","\n","    # Testing confusion matrix\n","    sns.heatmap(metrics['testing']['confusion_matrix'], annot=True, fmt='d', cmap='Blues', ax=axes[1])\n","    axes[1].set_title('Testing Confusion Matrix')\n","    axes[1].set_xlabel('Predicted Label')\n","    axes[1].set_ylabel('True Label')\n","\n","    plt.tight_layout()\n","    plt.show()\n"],"metadata":{"execution":{"iopub.status.busy":"2024-05-17T14:50:29.806819Z","iopub.execute_input":"2024-05-17T14:50:29.808039Z","iopub.status.idle":"2024-05-17T14:50:57.046928Z","shell.execute_reply.started":"2024-05-17T14:50:29.80799Z","shell.execute_reply":"2024-05-17T14:50:57.045428Z"},"trusted":true,"id":"shZIgo3UBOfl","executionInfo":{"status":"ok","timestamp":1747918143093,"user_tz":-120,"elapsed":25028,"user":{"displayName":"","userId":""}},"outputId":"8407b7d4-ed60-482b-b248-b0c6627c4518","colab":{"base_uri":"https://localhost:8080/","height":1000}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Algorithm: XGBoost\n","      Metric  Training  Testing\n","0  Precision     100.0     99.9\n","1     Recall     100.0     99.8\n","2   F1-score     100.0     99.8\n","\n","\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1500x500 with 4 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Algorithm: Random Forest\n","      Metric  Training  Testing\n","0  Precision     100.0     99.9\n","1     Recall     100.0     99.9\n","2   F1-score     100.0     99.9\n","\n","\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1500x500 with 4 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Algorithm: ExtraTreesClassifier\n","      Metric  Training  Testing\n","0  Precision     100.0     99.9\n","1     Recall     100.0     99.9\n","2   F1-score     100.0     99.9\n","\n","\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1500x500 with 4 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["# Initialize a list to store the scores\n","all_scores = []\n","\n","# Iterate over the results\n","for classifier_name, metrics in results.items():\n","    # Append the scores to the list\n","    all_scores.append({\n","        'Algorithm': classifier_name,\n","        'Training Precision': metrics['training']['precision'],\n","        'Testing Precision': metrics['testing']['precision'],\n","        'Training Recall': metrics['training']['recall'],\n","        'Testing Recall': metrics['testing']['recall'],\n","        'Training F1-score': metrics['training']['f1-score'],\n","        'Testing F1-score': metrics['testing']['f1-score']\n","    })\n","\n","# Create a DataFrame from the scores list\n","scores_df = pd.DataFrame(all_scores)\n","\n","# Sort the DataFrame by the 'Testing F1-score' column in descending order\n","scores_sorted = scores_df.sort_values(by='Testing F1-score', ascending=False)\n","\n","# Display the sorted DataFrame\n","scores_sorted"],"metadata":{"execution":{"iopub.status.busy":"2024-05-17T14:50:57.048537Z","iopub.execute_input":"2024-05-17T14:50:57.048951Z","iopub.status.idle":"2024-05-17T14:50:57.073803Z","shell.execute_reply.started":"2024-05-17T14:50:57.048909Z","shell.execute_reply":"2024-05-17T14:50:57.072581Z"},"trusted":true,"id":"MAq-yka2BOfl","executionInfo":{"status":"ok","timestamp":1747918152720,"user_tz":-120,"elapsed":95,"user":{"displayName":"","userId":""}},"outputId":"19589381-b809-4c05-e6a9-dbc8bb54de5b","colab":{"base_uri":"https://localhost:8080/","height":143}},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["              Algorithm  Training Precision  Testing Precision  \\\n","1         Random Forest               100.0               99.9   \n","2  ExtraTreesClassifier               100.0               99.9   \n","0               XGBoost               100.0               99.9   \n","\n","   Training Recall  Testing Recall  Training F1-score  Testing F1-score  \n","1            100.0            99.9              100.0              99.9  \n","2            100.0            99.9              100.0              99.9  \n","0            100.0            99.8              100.0              99.8  "],"text/html":["\n","  <div id=\"df-dac49d75-09d7-44bd-9f0b-721c60c0f31a\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Algorithm</th>\n","      <th>Training Precision</th>\n","      <th>Testing Precision</th>\n","      <th>Training Recall</th>\n","      <th>Testing Recall</th>\n","      <th>Training F1-score</th>\n","      <th>Testing F1-score</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1</th>\n","      <td>Random Forest</td>\n","      <td>100.0</td>\n","      <td>99.9</td>\n","      <td>100.0</td>\n","      <td>99.9</td>\n","      <td>100.0</td>\n","      <td>99.9</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>ExtraTreesClassifier</td>\n","      <td>100.0</td>\n","      <td>99.9</td>\n","      <td>100.0</td>\n","      <td>99.9</td>\n","      <td>100.0</td>\n","      <td>99.9</td>\n","    </tr>\n","    <tr>\n","      <th>0</th>\n","      <td>XGBoost</td>\n","      <td>100.0</td>\n","      <td>99.9</td>\n","      <td>100.0</td>\n","      <td>99.8</td>\n","      <td>100.0</td>\n","      <td>99.8</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-dac49d75-09d7-44bd-9f0b-721c60c0f31a')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-dac49d75-09d7-44bd-9f0b-721c60c0f31a button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-dac49d75-09d7-44bd-9f0b-721c60c0f31a');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-5e40182a-a3b8-454d-ac79-494d53ad6ade\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-5e40182a-a3b8-454d-ac79-494d53ad6ade')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-5e40182a-a3b8-454d-ac79-494d53ad6ade button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","  <div id=\"id_56966b47-c551-40c2-b2ac-718c1898cbf9\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('scores_sorted')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_56966b47-c551-40c2-b2ac-718c1898cbf9 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('scores_sorted');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"scores_sorted","summary":"{\n  \"name\": \"scores_sorted\",\n  \"rows\": 3,\n  \"fields\": [\n    {\n      \"column\": \"Algorithm\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Random Forest\",\n          \"ExtraTreesClassifier\",\n          \"XGBoost\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Training Precision\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": 100.0,\n        \"max\": 100.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          100.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Testing Precision\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.7404671430534633e-14,\n        \"min\": 99.9,\n        \"max\": 99.9,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          99.9\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Training Recall\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": 100.0,\n        \"max\": 100.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          100.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Testing Recall\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0577350269189675,\n        \"min\": 99.8,\n        \"max\": 99.9,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          99.8\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Training F1-score\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": 100.0,\n        \"max\": 100.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          100.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Testing F1-score\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0577350269189675,\n        \"min\": 99.8,\n        \"max\": 99.9,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          99.8\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":38}]},{"cell_type":"markdown","source":["## Choosing the XGBoost Model as our Final Model"],"metadata":{"id":"0fAdLdw9BOfm"}},{"cell_type":"code","source":["from xgboost import XGBClassifier\n","from sklearn.model_selection import train_test_split\n","from sklearn.metrics import f1_score\n","import joblib\n","\n","# Assuming you have your data in X_train_os, y_train_os\n","# Split the data into training and testing sets\n","X_train, X_test, y_train, y_test = train_test_split(X_train_os, y_train_os, test_size=0.2, random_state=42)\n","\n","# Define and train the XGBoost model\n","xgb_model = XGBClassifier()\n","xgb_model.fit(X_train, y_train)\n","\n","# Make predictions\n","y_pred_train = xgb_model.predict(X_train)\n","y_pred_test = xgb_model.predict(X_test)\n","\n","# Evaluate the model using F1 score\n","train_f1 = f1_score(y_train, y_pred_train)\n","test_f1 = f1_score(y_test, y_pred_test)\n","\n","print(f\"Training F1-score: {train_f1}\")\n","print(f\"Testing F1-score: {test_f1}\")\n"],"metadata":{"execution":{"iopub.status.busy":"2024-05-17T14:50:57.075444Z","iopub.execute_input":"2024-05-17T14:50:57.07609Z","iopub.status.idle":"2024-05-17T14:50:57.641094Z","shell.execute_reply.started":"2024-05-17T14:50:57.076046Z","shell.execute_reply":"2024-05-17T14:50:57.639989Z"},"trusted":true,"id":"jhLcGIJ9BOfm","executionInfo":{"status":"ok","timestamp":1747918160604,"user_tz":-120,"elapsed":1049,"user":{"displayName":"","userId":""}},"outputId":"eef1ed15-47e6-4498-b75f-f2d79a5494cf","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Training F1-score: 0.9998904143901561\n","Testing F1-score: 0.9982556690755046\n"]}]},{"cell_type":"markdown","source":["## Saving the Model in Joblib and Pickle format"],"metadata":{"id":"hTazd_LNBOfm"}},{"cell_type":"code","source":["import pickle\n","import joblib\n","\n","# Save the trained model using joblib\n","joblib.dump(xgb_model, 'aml_model.joblib')\n","\n","\n","# Save the trained model using pickle\n","with open('aml_model.pkl', 'wb') as file:\n","    pickle.dump(xgb_model, file)"],"metadata":{"execution":{"iopub.status.busy":"2024-05-17T14:50:57.642429Z","iopub.execute_input":"2024-05-17T14:50:57.64277Z","iopub.status.idle":"2024-05-17T14:50:57.659108Z","shell.execute_reply.started":"2024-05-17T14:50:57.642743Z","shell.execute_reply":"2024-05-17T14:50:57.657749Z"},"trusted":true,"id":"jLRhdIMtBOfn"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Load the pickle model"],"metadata":{"id":"ip_HiaS7BOfn"}},{"cell_type":"code","source":["import pickle\n","\n","# Load the trained model using pickle\n","with open('aml_model.pkl', 'rb') as file:\n","    loaded_model_pickle = pickle.load(file)"],"metadata":{"id":"nzrl_WEdBOfn"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Make Predictions on the Pickle model"],"metadata":{"id":"btcD54XABOfo"}},{"cell_type":"code","source":["# Make predictions using the loaded model from pickle\n","predictions_pickle = loaded_model_pickle.predict(X_test)"],"metadata":{"id":"xMWSr21LBOfo"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(predictions_pickle[:50])"],"metadata":{"id":"zBnjfbRQBOfo","executionInfo":{"status":"ok","timestamp":1747918181936,"user_tz":-120,"elapsed":45,"user":{"displayName":"","userId":""}},"outputId":"0b80a438-4ee3-4110-bf0a-3a5539a47f5f","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[0 1 0 1 1 0 0 1 1 0 0 0 0 0 0 0 0 1 1 0 1 0 1 0 0 0 1 1 0 0 1 0 0 0 0 1 1\n"," 1 1 1 1 0 0 0 0 1 0 1 1 0]\n"]}]},{"cell_type":"markdown","source":["## Load the Joblib model"],"metadata":{"id":"0IGUm2rXBOfp"}},{"cell_type":"code","source":["import joblib\n","\n","# Load the trained model using joblib\n","loaded_model_joblib = joblib.load('aml_model.joblib')"],"metadata":{"id":"VGrRvHdEBOfp"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Make predictions on the joblib model"],"metadata":{"id":"CKORegEWBOfp"}},{"cell_type":"code","source":["# Make predictions using the loaded model from joblib\n","predictions_joblib = loaded_model_joblib.predict(X_test)"],"metadata":{"id":"5RtnUdBLBOfq"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(predictions_joblib[:50])"],"metadata":{"id":"JGOlBDIUBOfq","executionInfo":{"status":"ok","timestamp":1747918193518,"user_tz":-120,"elapsed":27,"user":{"displayName":"","userId":""}},"outputId":"c7085390-7cb5-4ca8-d349-6114a1658769","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[0 1 0 1 1 0 0 1 1 0 0 0 0 0 0 0 0 1 1 0 1 0 1 0 0 0 1 1 0 0 1 0 0 0 0 1 1\n"," 1 1 1 1 0 0 0 0 1 0 1 1 0]\n"]}]}]}